36a37,40
> 	/* Was: int readfds, writefds, exceptfds; */
> 	/* Was: readfds = writefds = exceptfds = 0; */
> 
> 
74,75c78,79
< 		if (islower((unsigned char)buf[0]))
< 			buf[0] = toupper((unsigned char)buf[0]);
---
> 		if (a_islower((unsigned char)buf[0]))
> 			buf[0] = a_toupper((unsigned char)buf[0]);
385c389
< #define TAB_COLUMNS   8
---
> #define TAB_COLUMNS	8
396c400
< 
---
> 	
399c403
< 
---
> 	
402c406
< 
---
> 	
407c411
< 
---
> 		
413c417
< 
---
> 		
419c423
< 
---
> 			
425c429
< 
---
> 			
429c433
< 
---
> 		
450c454
< 
---
> 		
455c459
< 
---
> 			
458c462
< 
---
> 			
461c465
< 
---
> 			
467c471
< 
---
> 				
472c476
< 
---
> 		
474c478
< 		else if (isprint(c))
---
> 		else if (a_isprint(c))
478c482
< 
---
> 			
483c487
< 
---
> 	
486c490
< 
---
> 	
899c903
< 	if (isalpha((unsigned char)c)) return (A2I(tolower((unsigned char)c)) + 10);
---
> 	if (a_isalpha((unsigned char)c)) return (A2I(a_tolower((unsigned char)c)) + 10);
2822c2826
< 	Term_putstr(x, 0, -1, a, "-more-");
---
> 	Term_putstr(x, 0, -1, a, "-далее-");
2834c2838
< 			bell("Illegal response to a 'more' prompt!");
---
> 			bell("Неправильный ответ на запрос -далее-!");
3223c3227
< 		ch = (isprint((unsigned char)*s) ? *s : ' ');
---
> 		ch = (a_isprint((unsigned char)*s) ? *s : ' ');
3378c3382
< 			ch = (isprint(s[n]) ? s[n] : ' ');
---
> 			ch = (a_isprint(s[n]) ? s[n] : ' ');
3532c3536
< 				if ((k < len-1) && (isprint((unsigned char)ch)))
---
> 				if ((k < len-1) /*&& (a_isprint((unsigned char)ch))*/)
3538c3542
< 					bell("Illegal edit key!");
---
> 					bell("Неправильная клавиша!");
3628c3632
< 			sprintf(tmp, "Quantity (0-%d): ", max);
---
> 			sprintf(tmp, "Количество (0-%d): ", max);
3644c3648
< 		if (isalpha((unsigned char)buf[0])) amt = max;
---
> 		if (a_isalpha((unsigned char)buf[0])) amt = max;
3693c3697
< 		bell("Illegal response to a 'yes/no' question!");
---
> 		bell("Неправильный ответ!");
3746c3750
< 	put_str("[Press any key to continue]", row, 23);
---
> 	put_str("[Нажмите любую клавишу]", row, 23);
3855c3859
< 			prt("Count: ", 0, 0);
---
> 			prt("Повторять: ", 0, 0);
3870c3874
< 					prt(format("Count: %d", p_ptr->command_arg), 0, 0);
---
> 					prt(format("Повторять: %d", p_ptr->command_arg), 0, 0);
3880c3884
< 						bell("Invalid repeat count!");
---
> 						bell("Неправильное количество!");
3894c3898
< 					prt(format("Count: %d", p_ptr->command_arg), 0, 0);
---
> 					prt(format("Повторять: %d", p_ptr->command_arg), 0, 0);
3921c3925
< 				prt(format("Count: %d", p_ptr->command_arg), 0, 0);
---
> 				prt(format("Повторять: %d", p_ptr->command_arg), 0, 0);
3928c3932
< 				if (!get_com("Command: ", &ch))
---
> 				if (!get_com("Команда: ", &ch))
3944c3948
< 			(void)get_com("Command: ", &ch);
---
> 			(void)get_com("Команда: ", &ch);
3955c3959
< 			if (get_com("Control: ", &ch)) ch = KTRL(ch);
---
> 			if (get_com("Символ: ", &ch)) ch = KTRL(ch);
4041c4045
< 				if (!get_check("Are you sure? "))
---
> 				if (!get_check("Уверены? "))
4109a4114,4133
> 		case 'а':
> 		case 'е':
> 		case 'и':
> 		case 'о':
> 		case 'у':
> 		case 'э':
> 		case 'ё':
> 		case 'ы':
> 		case 'ю':
> 		case 'я':
> 		case 'А':
> 		case 'Е':
> 		case 'И':
> 		case 'О':
> 		case 'У':
> 		case 'Э':
> 		case 'Ё':
> 		case 'Ы':
> 		case 'Ю':
> 		case 'Я':
4467a4492,4891
> 
> /*
>  * Efficient version of '(T) += sprintf((T), "%s", (S))'
>  */
> #define object_desc_str_macro(T,S) do { \
>  \
> 	cptr s = (S); \
>  \
> 	/* Copy the string */ \
> 	while (*s) *(T)++ = *s++; \
>  \
> } while (0)
> 
> /* Для заданного падежа и числа разворачивает символы
>  * русской морфологии. Возвращает род.
>  */
> int expand_rus_codes(char *d, char *s, int pad, int chsl, int num)
> {
> 	int rod = ROD_M;
> 	char *t = d;
> 
> 	/* Copy the string */
> 	for (; *s; s++)
> 	{
> 		/* Знаки чередующ. гласных */
> 		if (*s == '*' && a_isalpha(*(s+1)))
> 		{
> 			if ((pad != PAD_IMEN && pad != PAD_VINIT) || chsl != 0)
> 				s++;
> 		}
> 		else if (*s == '^' && a_isalpha(*(s+1)))
> 		{
> 			if ((pad != PAD_IMEN && pad != PAD_VINIT) || chsl != 0)
> 				s++;
> 		}
> 		else if (*s == '|' && a_isalpha(*(s+1)))
> 		{
> 			if (pad != PAD_RODIT || chsl != 1)
> 				s++;
> 		}
> 		else if (*s == '\\' && a_isalpha(*(s+1)))
> 		{
> 			if (pad == PAD_RODIT && chsl == 1)
> 				s++;
> 		}
> 		
> 		/* Знак окончания */
> 		else if (*s == '$' && a_isalpha(*(s+1)))
> 		{
> 			s++;
> 			
> 			/* Существительное */
> 			if (*s == 'N')
> 			{
> 				s++;
> 				
> 				/* 1-ое склонение */
> 				if (*s == '1')
> 				{
> 					char cf;
> 					int oldchsl = chsl;
> 					s++;
> 					cf = *s;
> 					
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, chsl ? (cf == 'T' ? "ы" : "и") : (cf == 'N' ? "я" : "а")); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, chsl ? (cf == 'N' ? "ь" : "") : (cf == 'T' ? "ы" : "и")); break;
> 						case PAD_DAT:    object_desc_str_macro(t, chsl ? (cf == 'N' ? "ям" : "ам") : "е"); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, chsl ? (cf == 'T' ? "ы" : "и") : (cf == 'N' ? "ю" : "у")); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, chsl ? (cf == 'N' ? "ями" : "ами") : (cf == 'N' ? "ей" : "ой")); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, chsl ? (cf == 'N' ? "ях" : "ах") : "е"); break;
> 					}
> 					
> 					chsl = oldchsl;
> 					rod = ROD_F;
> 				}
> 
> 				/* 2-ое склонение */
> 				else if (*s == '2')
> 				{
> 					char cf;
> 					int oldchsl = chsl;
> 					s++;
> 					cf = *s;
> 					
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, chsl ? (cf == 'E' ? "я" : cf == 'F' ? "и" : "а") : ""); break;
> 						case PAD_RODIT:
> 						{
> 							object_desc_str_macro(t, chsl ? ((cf == 'A' || cf == 'F') ? "ов" :
> 								(cf == 'B' ? "ев" : ((cf == 'C' || cf == 'E') ? "ей" : ""))) : "а");
> 							/* копья */
> 							if (*(t-2) == 'ь' && cf == 'D')
> 								*(t-1) = 'я';
> 							break;
> 						}
> 						case PAD_DAT:    object_desc_str_macro(t, chsl ? (cf == 'E' ? "ям" : "ам") : (cf == 'E' ? "ю" : "у")); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, chsl ? (cf == 'E' ? "я" : cf == 'F' ? "и" : "а") : ""); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, chsl ? (cf == 'E' ? "ями" : "ами") : (cf == 'E' || (*(t-1) == 'ь' && cf == 'D') ? "ем" : "ом")); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, chsl ? (cf == 'E' ? "ях" : "ах") : "е"); break;
> 					}
> 					
> 					chsl = oldchsl;
> 					rod = (cf == 'D' ? ROD_N : ROD_M);
> 				}
> 				
> 				else if (*s == '3')
> 				{
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, chsl ? "и" : "ь"); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, chsl ? "ей" : "и"); break;
> 						case PAD_DAT:    object_desc_str_macro(t, chsl ? "ям" : "и"); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, chsl ? "и" : "ь"); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, chsl ? "ями" : "ью"); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, chsl ? "ях" : "и"); break;
> 					}
> 					rod = ROD_F;
> 				}
> 
> 			}
> 
> 			/* Прилагательное */
> 			else if (*s == 'A')
> 			{
> 				char cf;
> 				
> 				s++;
> 				cf = *(s+1);
> 				
> 				/* Мн.ч. */
> 				if (num % 10 != 1 || num / 10 == 1)
> 				{
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "ие" : "ые"); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "их" : "ых"); break;
> 						case PAD_DAT:    object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "им" : "ым"); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "их" : "ых"); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "ими" : "ыми"); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "их" : "ых"); break;
> 					}
> 				}
> 				
> 				/* М.р. */
> 				else if (*s == 'M')
> 				{
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, (cf == 'M') ? "ий" : (((cf == 'U' || cf == 'N') ? "ой" : "ый"))); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, "ого"); break;
> 						case PAD_DAT:    object_desc_str_macro(t, "ому"); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, (cf == 'M') ? "ий" : (((cf == 'U' || cf == 'N') ? "ой" : "ый"))); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "им" : "ым"); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, "ом"); break;
> 					}
> 				}
> 				/* Ж.р. */
> 				else if (*s == 'F')
> 				{
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, "ая"); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, "ой"); break;
> 						case PAD_DAT:    object_desc_str_macro(t, "ой"); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, "ую"); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, "ой"); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, "ой"); break;
> 					}
> 				}
> 				/* С.р. */
> 				else if (*s == 'N')
> 				{
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, (cf == 'O' ? "ее" : "ое")); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, (cf == 'O' ? "его" : "ого")); break;
> 						case PAD_DAT:    object_desc_str_macro(t, (cf == 'O' ? "ему" : "ому")); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, (cf == 'O' ? "ее" : "ое")); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, "им"); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, (cf == 'O' ? "ем" : "ом")); break;
> 					}
> 				}
> 				
> 				s++;
> 			}
> 		}
> 
> 		/* Normal */
> 		else
> 		{
> 			/* Copy */
> 			*t++ = *s;
> 		}
> 	}
> 	
> 	*t = '\0';
> 	return rod;
> }
> 
> 
> /* Аналогично для одушевленного */
> int expand_rus_codes2(char *d, char *s, int pad, int chsl, int num)
> {
> 	int rod = ROD_M;
> 	char *t = d;
> 
> 	/* Copy the string */
> 	for (; *s; s++)
> 	{
> 		/* Знаки чередующ. гласных */
> 		if (*s == '*')
> 		{
> 			if (pad != PAD_IMEN || chsl != 0)
> 				s++;
> 		}
> 		else if (*s == '^')
> 		{
> 			if (pad == PAD_IMEN || chsl != 0)
> 				s++;
> 		}
> 		else if (*s == '|')
> 		{
> 			if (pad != PAD_RODIT || chsl != 1)
> 				s++;
> 		}
> 		else if (*s == '\\')
> 		{
> 			if (pad == PAD_RODIT && chsl == 1)
> 				s++;
> 		}
> 		
> 		/* Знак окончания */
> 		else if (*s == '$')
> 		{
> 			s++;
> 			
> 			/* Существительное */
> 			if (*s == 'N')
> 			{
> 				s++;
> 				
> 				/* 1-ое склонение */
> 				if (*s == '1')
> 				{
> 					char cf;
> 					int oldchsl = chsl;
> 					s++;
> 					cf = *s;
> 					
> 					if (cf == 'O')
> 					{
> 						chsl = 1;
> 						cf = 'M';
> 					}
> 					
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, chsl ? (cf == 'T' ? "ы" : "и") : (cf == 'N' ? "я" : "а")); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, chsl ? (cf == 'N' ? "ь" : "") : (cf == 'T' ? "ы" : "и")); break;
> 						case PAD_DAT:    object_desc_str_macro(t, chsl ? (cf == 'N' ? "ям" : "ам") : "е"); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, chsl ? (cf == 'T' ? "ы" : "и") : (cf == 'N' ? "ю" : "у")); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, chsl ? (cf == 'N' ? "ями" : "ами") : (cf == 'N' ? "ей" : "ой")); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, chsl ? (cf == 'N' ? "ях" : "ах") : "е"); break;
> 					}
> 					
> 					chsl = oldchsl;
> 					rod = ROD_F;
> 				}
> 
> 				/* 2-ое склонение */
> 				else if (*s == '2')
> 				{
> 					char cf;
> 					int oldchsl = chsl;
> 					s++;
> 					cf = *s;
> 					
> 					if (cf == 'F')
> 						chsl = 1;
> 					
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, chsl ? (cf == 'E' ? "я" : cf == 'F' ? "и" : "а") : ""); break;
> 						case PAD_RODIT:
> 						{
> 							object_desc_str_macro(t, chsl ? ((cf == 'A' || cf == 'F') ? "ов" :
> 								(cf == 'B' ? "ев" : ((cf == 'C' || cf == 'E') ? "ей" : ""))) : "а"); /* <- XXX! */
> 							/* копья */
> 							if (*(t-2) == 'ь' && cf == 'D')
> 								*(t-1) = 'я';
> 							break;
> 						}
> 						case PAD_DAT:    object_desc_str_macro(t, chsl ? (cf == 'E' ? "ям" : "ам") : (cf == 'E' ? "ю" : "у")); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, chsl ? (cf == 'E' ? "ев" : "ов") : (cf == 'E' ? "я" : (cf == 'D' ? "о" : "а"))); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, chsl ? (cf == 'E' ? "ями" : "ами") : (cf == 'E' ? "ем" : "ом")); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, chsl ? (cf == 'E' ? "ях" : "ах") : "е"); break;
> 					}
> 					
> 					chsl = oldchsl;
> 					rod = (cf == 'D' ? ROD_N : ROD_M);
> 				}
> 				
> 				else if (*s == '3')
> 				{
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, chsl ? "и" : "ь"); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, chsl ? "ей" : "и"); break;
> 						case PAD_DAT:    object_desc_str_macro(t, chsl ? "ям" : "и"); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, chsl ? "и" : "ь"); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, chsl ? "ями" : "ью"); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, chsl ? "ях" : "и"); break;
> 					}
> 					rod = ROD_F;
> 				}
> 
> 			}
> 
> 			/* Прилагательное */
> 			else if (*s == 'A')
> 			{
> 				char cf;
> 				
> 				s++;
> 				cf = *(s+1);
> 				
> 				/* Мн.ч. */
> 				if ((num % 10 != 1 || num / 10 == 1) || cf == 'V')
> 				{
> 					if (cf == 'V')
> 						cf = 'T';
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "ие" : "ые"); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "их" : "ых"); break;
> 						case PAD_DAT:    object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "им" : "ым"); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "их" : "ых"); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "ими" : "ыми"); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, (cf == 'M' || cf == 'N') ? "их" : "ых"); break;
> 					}
> 				}
> 				
> 				/* М.р. */
> 				else if (*s == 'M')
> 				{
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, (cf == 'M' || cf == 'O') ? "ий" : (((cf == 'U' || cf == 'N') ? "ой" : "ый"))); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, (cf == 'O' ? "его" : "ого")); break;
> 						case PAD_DAT:    object_desc_str_macro(t, (cf == 'O' ? "ему" : "ому")); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, (cf == 'O' ? "его" : "ого")); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, (cf == 'M' || cf == 'N' || cf == 'O') ? "им" : "ым"); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, (cf == 'O' ? "ем" : "ом")); break;
> 					}
> 				}
> 				/* Ж.р. */
> 				else if (*s == 'F')
> 				{
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, (cf == 'O' ? "яя" : "ая")); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, (cf == 'O' ? "ей" : "ой")); break;
> 						case PAD_DAT:    object_desc_str_macro(t, (cf == 'O' ? "ей" : "ой")); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, (cf == 'O' ? "юю" : "ую")); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, (cf == 'O' ? "ей" : "ой")); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, (cf == 'O' ? "ей" : "ой")); break;
> 					}
> 				}
> 				/* С.р. */
> 				else if (*s == 'N')
> 				{
> 					switch (pad)
> 					{
> 						case PAD_IMEN:   object_desc_str_macro(t, (cf == 'O' ? "ее" : "ое")); break;
> 						case PAD_RODIT:  object_desc_str_macro(t, (cf == 'O' ? "его" : "ого")); break;
> 						case PAD_DAT:    object_desc_str_macro(t, (cf == 'O' ? "ему" : "ому")); break;
> 						case PAD_VINIT:  object_desc_str_macro(t, (cf == 'O' ? "ее" : "ое")); break;
> 						case PAD_TVORIT: object_desc_str_macro(t, "им"); break;
> 						case PAD_PREDL:  object_desc_str_macro(t, (cf == 'O' ? "ем" : "ом")); break;
> 					}
> 				}
> 				
> 				s++;
> 			}
> 		}
> 
> 		/* Normal */
> 		else
> 		{
> 			/* Copy */
> 			*t++ = *s;
> 		}
> 	}
> 	
> 	*t = '\0';
> 	return rod;
> }
